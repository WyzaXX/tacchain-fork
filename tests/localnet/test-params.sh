#!/bin/bash -e

export GENESIS_ACC_1_ADDRESS=tac1zg69v7ys40x77y352eufp27daufrg4nckcjrx2
export GENESIS_ACC_2_ADDRESS=tac167a5p268zlj2tgmlrmhkcqyex07stu5k6s23lq
export HOMEDIR=./.test-localnet-params
export CHAIN_ID=tacchain_239-1
export VALIDATOR_1_MNEMONIC="spray retire festival globe nuclear festival install lunch deal bench unlock car solution vague witness weasel ankle rebel slush allow wing seek tobacco carbon" # tac1tg73cpsxxca3m2t6w09gezvcg37zrqqxglwsgv
export VALIDATOR_2_MNEMONIC="coach deposit public fiction utility dentist course bread maple lawn dress bridge melody snake taxi suggest student vote actress shop man service bubble build" # tac137kh82tna99k9cdnvpga9jcme0tqn9up40f96g
export VALIDATOR_3_MNEMONIC="brave name midnight glass story soda calm panel menu rescue check puzzle layer mango pull snake short spread virtual use already alone observe cream" # tac13gv56l9leqvdjj6y4cr0g8rtzudk5c65md003y
export VALIDATOR_4_MNEMONIC="canal marble glimpse nurse afford medal film whale hockey defense mango visa romance plastic little cage balance special sibling clump machine wrestle energy acid" # tac1zh9dxqc28gx99gyeq6rfwmd623m77h00zykpvz

# start new multi-validator network
echo "Starting new multi-validator network with 4 nodes"
echo y | make localnet-init-multi-node > /dev/null 2>&1
make HOMEDIR=${HOMEDIR}/node0 localnet-start > /dev/null 2>&1 &
make HOMEDIR=${HOMEDIR}/node1 localnet-start > /dev/null 2>&1 &
make HOMEDIR=${HOMEDIR}/node2 localnet-start > /dev/null 2>&1 &
make HOMEDIR=${HOMEDIR}/node3 localnet-start > /dev/null 2>&1 &

# wait for network to start
echo "Waiting for network to start"
timeout=120
elapsed=0
interval=2
while ! tacchaind query block --type=height 3 --node http://localhost:45111 > /dev/null 2>&1; do
  sleep $interval
  elapsed=$((elapsed + interval))
  if [ $elapsed -ge $timeout ]; then
    echo "Failed to start network. Timeout waiting for block height 3"
    killall tacchaind
    exit 1
  fi
done
echo "Network started successfully"

# verify network has 4 active validators
echo "Verifying network has 4 active validators"
expected_active_validators="4"
active_validators=$(tacchaind q comet-validator-set --node http://localhost:45111 --output json | jq -r '.pagination .total')
if [[ "$active_validators" != "$expected_active_validators" ]]; then
  echo "Failed to verify 4 active validators"
  echo "Expected: $expected_active_validators"
  echo "Got:      $active_validators"
  
  killall tacchaind
  exit 1
else
  echo "Verified 4 active validators successfully"
fi

# verify validator addresses
echo "Verifying validator addresses"
expected_addresses=(
  "tac1tg73cpsxxca3m2t6w09gezvcg37zrqqxglwsgv"
  "tac137kh82tna99k9cdnvpga9jcme0tqn9up40f96g"
  "tac13gv56l9leqvdjj6y4cr0g8rtzudk5c65md003y"
  "tac1zh9dxqc28gx99gyeq6rfwmd623m77h00zykpvz"
)
for i in $(seq 0 3); do
  validator_addr=$(tacchaind keys show validator --home ./.test-localnet-params/node$i -a)
  if [[ "$validator_addr" != "${expected_addresses[i]}" ]]; then
    echo "Failed to verify validator $i address"
    echo "Expected: ${expected_addresses[i]}"
    echo "Got:      $validator_addr"
    
    killall tacchaind
    exit 1
  else
    echo "Verified validator $i address successfully"
  fi
done

# verify token distribution
echo "Verifying token distribution"

# verify genesis account 1 balance
echo "Verifying genesis account 1 balance"
expected_genesis_acc_1_balance="9979990000000000000000000000"
genesis_acc_1_balance=$(tacchaind q bank balances $GENESIS_ACC_1_ADDRESS --node http://localhost:45111 --output json | jq -r '.balances[0].amount')
if [[ "$genesis_acc_1_balance" != "$expected_genesis_acc_1_balance" ]]; then
  echo "Failed to verify genesis account 1 balance"
  echo "Expected: $expected_genesis_acc_1_balance"
  echo "Got:      $genesis_acc_1_balance"
  
  killall tacchaind
  exit 1
else
  echo "Verified genesis account 1 balance successfully"
fi

# verify genesis account 2 balance
echo "Verifying genesis account 2 balance"
expected_genesis_acc_2_balance="10000000000000000000000"
genesis_acc_2_balance=$(tacchaind q bank balances $GENESIS_ACC_2_ADDRESS --node http://localhost:45111 --output json | jq -r '.balances[0].amount')
if [[ "$genesis_acc_2_balance" != "$expected_genesis_acc_2_balance" ]]; then
  echo "Failed to verify genesis account 2 balance"
  echo "Expected: $expected_genesis_acc_2_balance"
  echo "Got:      $genesis_acc_2_balance"
  
  killall tacchaind
  exit 1
else
  echo "Verified genesis account 2 balance successfully"
fi

# verify validators emergency balances, self delegations and description
echo "Verifying validators emergency balances and self delegations"
expected_validator_emergency_balance="99995000000000000000"
expected_validator_self_delegation="4999900000000000000000000"
for i in $(seq 0 3); do
  echo "Verifying validator $i emergency balance"
  tac_addr=$(tacchaind keys show validator --home ./.test-localnet-params/node$i -a)
  balance=$(tacchaind q bank balances $tac_addr --node http://localhost:45111 --output json | jq -r '.balances[0].amount')
  if [[ "$balance" != "$expected_validator_emergency_balance" ]]; then
    echo "Failed to verify validator $i emergency balance"
    echo "Expected: $expected_validator_emergency_balance"
    echo "Got:      $balance"
    killall tacchaind
    exit 1
  else
    echo "Verified validator $i emergency balance successfully"
  fi

  echo "Verifying validator $i self delegation"
  valoper_addr=$(tacchaind keys show validator --home ./.test-localnet-params/node$i -a --bech val)
  self_delegation=$(tacchaind q staking validator $valoper_addr --node http://localhost:45111 --output json | jq -r '.validator .tokens')
  if [[ "$self_delegation" != "$expected_validator_self_delegation" ]]; then
    echo "Failed to verify validator $i self delegation"
    echo "Expected: $expected_validator_self_delegation"
    echo "Got:      $self_delegation"
    killall tacchaind
    exit 1
  else
    echo "Verified validator $i self delegation successfully"
  fi

  echo "Verifying validator $i description"
  expected_description="{
  \"moniker\": \"TAC Validator $((i + 1))\",
  \"identity\": \"4DD1A5E1D03FA12D\",
  \"website\": \"https://tac.build/\"
}"
  description=$(tacchaind q staking validator $valoper_addr --node http://localhost:45111 --output json | jq -r '.validator .description')
  if [[ "$description" != "$expected_description" ]]; then
    echo "Failed to verify validator $i description"
    echo "Expected: $expected_description"
    echo "Got:      $description"
    killall tacchaind
    exit 1
  else
    echo "Verified validator $i description successfully"
  fi
done

# verify predeployed contracts
echo "Verifying predeployed contracts"

# verify safe singleton contract
echo "Verifying safe singleton contract"
addr="0x914d7fec6aac8cd542e72bca78b30650d45643d7"
expected="0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3"
echo -n "  Contract $addr: "
code=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$addr\",\"latest\"],\"id\":1}" http://localhost:45128 | jq -r '.result')
if [[ "$code" != "$expected" ]]; then
  echo "Failed to verify safe singleton contract"
  echo "Expected: $expected"
  echo "Got:      $code"
  
  killall tacchaind
  exit 1
else
  echo "Verified safe singleton contract successfully"
fi

# verify arachnid contract
echo "Verifying arachnid contract"
addr="0x4e59b44847b379578588920ca78fbf26c0b4956c"
expected="0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3"
echo -n "  Contract $addr: "
code=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$addr\",\"latest\"],\"id\":1}" http://localhost:45128 | jq -r '.result')
if [[ "$code" != "$expected" ]]; then
  echo "Failed to verify arachnid contract"
  echo "Expected: $expected"
  echo "Got:      $code"
  
  killall tacchaind
  exit 1
else
  echo "Verified arachnid contract successfully"
fi

# verify multicall contract
echo "Verifying multicall contract"
addr="0xca11bde05977b3631167028862be2a173976ca11"
expected="0x6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461025a578063bce38bd714610275578063c3077fa914610288578063ee82ac5e1461029b57600080fd5b80634d2301cc146101ec57806372425d9d1461022157806382ad56cb1461023457806386d516e81461024757600080fd5b80633408e470116100c65780633408e47014610191578063399542e9146101a45780633e64a696146101c657806342cbb15c146101d957600080fd5b80630f28c97d146100f8578063174dea711461011a578063252dba421461013a57806327e86d6e1461015b575b600080fd5b34801561010457600080fd5b50425b6040519081526020015b60405180910390f35b61012d610128366004610a85565b6102ba565b6040516101119190610bbe565b61014d610148366004610a85565b6104ef565b604051610111929190610bd8565b34801561016757600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0140610107565b34801561019d57600080fd5b5046610107565b6101b76101b2366004610c60565b610690565b60405161011193929190610cba565b3480156101d257600080fd5b5048610107565b3480156101e557600080fd5b5043610107565b3480156101f857600080fd5b50610107610207366004610ce2565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022d57600080fd5b5044610107565b61012d610242366004610a85565b6106ab565b34801561025357600080fd5b5045610107565b34801561026657600080fd5b50604051418152602001610111565b61012d610283366004610c60565b61085a565b6101b7610296366004610a85565b610a1a565b3480156102a757600080fd5b506101076102b6366004610d18565b4090565b60606000828067ffffffffffffffff8111156102d8576102d8610d31565b60405190808252806020026020018201604052801561031e57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f65790505b5092503660005b8281101561047757600085828151811061034157610341610d60565b6020026020010151905087878381811061035d5761035d610d60565b905060200281019061036f9190610d8f565b6040810135958601959093506103886020850185610ce2565b73ffffffffffffffffffffffffffffffffffffffff16816103ac6060870187610dcd565b6040516103ba929190610e32565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b50602080850191909152901515808452908501351761046d577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610325565b508234146104e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff81111561050c5761050c610d31565b60405190808252806020026020018201604052801561053f57816020015b606081526020019060019003908161052a5790505b5091503660005b8281101561068657600087878381811061056257610562610d60565b90506020028101906105749190610e42565b92506105836020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166105a66020850185610dcd565b6040516105b4929190610e32565b6000604051808303816000865af19150503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b5086848151811061060957610609610d60565b602090810291909101015290508061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b50600101610546565b5050509250929050565b43804060606106a086868661085a565b905093509350939050565b6060818067ffffffffffffffff8111156106c7576106c7610d31565b60405190808252806020026020018201604052801561070d57816020015b6040805180820190915260008152606060208201528152602001906001900390816106e55790505b5091503660005b828110156104e657600084828151811061073057610730610d60565b6020026020010151905086868381811061074c5761074c610d60565b905060200281019061075e9190610e76565b925061076d6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166107906040850185610dcd565b60405161079e929190610e32565b6000604051808303816000865af19150503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b506020808401919091529015158083529084013517610851577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b50600101610714565b6060818067ffffffffffffffff81111561087657610876610d31565b6040519080825280602002602001820160405280156108bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816108945790505b5091503660005b82811015610a105760008482815181106108df576108df610d60565b602002602001015190508686838181106108fb576108fb610d60565b905060200281019061090d9190610e42565b925061091c6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff1661093f6020850185610dcd565b60405161094d929190610e32565b6000604051808303816000865af19150503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b506020830152151581528715610a07578051610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b506001016108c3565b5050509392505050565b6000806060610a2b60018686610690565b919790965090945092505050565b60008083601f840112610a4b57600080fd5b50813567ffffffffffffffff811115610a6357600080fd5b6020830191508360208260051b8501011115610a7e57600080fd5b9250929050565b60008060208385031215610a9857600080fd5b823567ffffffffffffffff811115610aaf57600080fd5b610abb85828601610a39565b90969095509350505050565b6000815180845260005b81811015610aed57602081850181015186830182015201610ad1565b81811115610aff576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bb1578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b9d81860183610ac7565b9a86019a9450505090830190600101610b4f565b5090979650505050505050565b602081526000610bd16020830184610b32565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c52577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c40868351610ac7565b95509284019290840190600101610c06565b509398975050505050505050565b600080600060408486031215610c7557600080fd5b83358015158114610c8557600080fd5b9250602084013567ffffffffffffffff811115610ca157600080fd5b610cad86828701610a39565b9497909650939450505050565b838152826020820152606060408201526000610cd96060830184610b32565b95945050505050565b600060208284031215610cf457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bd157600080fd5b600060208284031215610d2a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610dc357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e0257600080fd5b83018035915067ffffffffffffffff821115610e1d57600080fd5b602001915036819003821315610a7e57600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610dc357600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610dc357600080fdfea2646970667358221220bb2b5c71a328032f97c676ae39a1ec2148d3e5d6f73d95e9b17910152d61f16264736f6c634300080c0033"
echo -n "  Contract $addr: "
code=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$addr\",\"latest\"],\"id\":1}" http://localhost:45128 | jq -r '.result')
if [[ "$code" != "$expected" ]]; then
  echo "Failed to verify multicall contract"
  echo "Expected: $expected"
  echo "Got:      $code"
  
  killall tacchaind
  exit 1
else
  echo "Verified multicall contract successfully"
fi

# verify createx contract
echo "Verifying createx contract"
addr="0xba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed"
expected="0x60806040526004361061018a5760003560e01c806381503da1116100d6578063d323826a1161007f578063e96deee411610059578063e96deee414610395578063f5745aba146103a8578063f9664498146103bb57600080fd5b8063d323826a1461034f578063ddda0acb1461036f578063e437252a1461038257600080fd5b80639c36a286116100b05780639c36a28614610316578063a7db93f214610329578063c3fe107b1461033c57600080fd5b806381503da1146102d0578063890c283b146102e357806398e810771461030357600080fd5b80632f990e3f116101385780636cec2536116101125780636cec25361461027d57806374637a7a1461029d5780637f565360146102bd57600080fd5b80632f990e3f1461023757806331a7c8c81461024a57806342d654fc1461025d57600080fd5b806327fe18221161016957806327fe1822146101f15780632852527a1461020457806328ddd0461461021757600080fd5b8062d84acb1461018f57806326307668146101cb57806326a32fc7146101de575b600080fd5b6101a261019d366004612915565b6103ce565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101a26101d9366004612994565b6103e6565b6101a26101ec3660046129db565b610452565b6101a26101ff3660046129db565b6104de565b6101a2610212366004612a39565b610539565b34801561022357600080fd5b506101a2610232366004612a90565b6106fe565b6101a2610245366004612aa9565b61072a565b6101a2610258366004612aa9565b6107bb565b34801561026957600080fd5b506101a2610278366004612b1e565b6107c9565b34801561028957600080fd5b506101a2610298366004612a90565b610823565b3480156102a957600080fd5b506101a26102b8366004612b4a565b61084f565b6101a26102cb3660046129db565b611162565b6101a26102de366004612b74565b6111e8565b3480156102ef57600080fd5b506101a26102fe366004612bac565b611276565b6101a2610311366004612bce565b6112a3565b6101a2610324366004612994565b611505565b6101a2610337366004612c49565b6116f1565b6101a261034a366004612aa9565b611964565b34801561035b57600080fd5b506101a261036a366004612cd9565b6119ed565b6101a261037d366004612c49565b611a17565b6101a2610390366004612bce565b611e0c565b6101a26103a3366004612915565b611e95565b6101a26103b6366004612bce565b611ea4565b6101a26103c9366004612b74565b611f2d565b60006103dd8585858533611a17565b95945050505050565b6000806103f2846120db565b90508083516020850134f59150610408826123d3565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f790600090a35092915050565b60006104d86104d260408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b836103e6565b92915050565b600081516020830134f090506104f3816123d3565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51190600090a2919050565b600080610545856120db565b905060008460601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f593505073ffffffffffffffffffffffffffffffffffffffff8316610635576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed1660048201526024015b60405180910390fd5b604051829073ffffffffffffffffffffffffffffffffffffffff8516907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f790600090a36000808473ffffffffffffffffffffffffffffffffffffffff1634876040516106a19190612d29565b60006040518083038185875af1925050503d80600081146106de576040519150601f19603f3d011682016040523d82523d6000602084013e6106e3565b606091505b50915091506106f382828961247d565b505050509392505050565b60006104d87f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed8361084f565b60006107b36107aa60408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b85858533611a17565b949350505050565b60006107b3848484336112a3565b60006040518260005260ff600b53836020527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6040526055600b20601452806040525061d694600052600160345350506017601e20919050565b60006104d8827f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed6107c9565b600060607f9400000000000000000000000000000000000000000000000000000000000000610887600167ffffffffffffffff612d45565b67ffffffffffffffff16841115610902576040517f3c55ab3b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b836000036109c7576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f800000000000000000000000000000000000000000000000000000000000000060368201526037015b6040516020818303038152906040529150611152565b607f8411610a60576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527fff0000000000000000000000000000000000000000000000000000000000000080831660218301527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088901b16602283015260f886901b1660368201526037016109b1565b60ff8411610b1f576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527fff0000000000000000000000000000000000000000000000000000000000000080831660218301527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088901b1660228301527f8100000000000000000000000000000000000000000000000000000000000000603683015260f886901b1660378201526038016109b1565b61ffff8411610bff576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f086901b1660378201526039016109b1565b62ffffff8411610ce0576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e886901b166037820152603a016109b1565b63ffffffff8411610dc2576040517fda0000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e086901b166037820152603b016109b1565b64ffffffffff8411610ea5576040517fdb0000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f850000000000000000000000000000000000000000000000000000000000000060368201527fffffffffff00000000000000000000000000000000000000000000000000000060d886901b166037820152603c016109b1565b65ffffffffffff8411610f89576040517fdc0000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f860000000000000000000000000000000000000000000000000000000000000060368201527fffffffffffff000000000000000000000000000000000000000000000000000060d086901b166037820152603d016109b1565b66ffffffffffffff841161106e576040517fdd0000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f870000000000000000000000000000000000000000000000000000000000000060368201527fffffffffffffff0000000000000000000000000000000000000000000000000060c886901b166037820152603e016109b1565b6040517fde0000000000000000000000000000000000000000000000000000000000000060208201527fff00000000000000000000000000000000000000000000000000000000000000821660218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660228201527f880000000000000000000000000000000000000000000000000000000000000060368201527fffffffffffffffff00000000000000000000000000000000000000000000000060c086901b166037820152603f0160405160208183030381529060405291505b5080516020909101209392505050565b60006104d86111e260408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b83611505565b600061126f61126860408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b8484610539565b9392505050565b600061126f83837f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed6119ed565b60008451602086018451f090506112b9816123d3565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51190600090a26000808273ffffffffffffffffffffffffffffffffffffffff168560200151876040516113279190612d29565b60006040518083038185875af1925050503d8060008114611364576040519150601f19603f3d011682016040523d82523d6000602084013e611369565b606091505b5091509150816113c9577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed1631156114fb578373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed73ffffffffffffffffffffffffffffffffffffffff163160405160006040518083038185875af1925050503d8060008114611495576040519150601f19603f3d011682016040523d82523d6000602084013e61149a565b606091505b509092509050816114fb577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b5050949350505050565b600080611511846120db565b905060006040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090506000828251602084016000f5905073ffffffffffffffffffffffffffffffffffffffff81166115e0576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b604051839073ffffffffffffffffffffffffffffffffffffffff8316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906790600090a361162c83610823565b935060008173ffffffffffffffffffffffffffffffffffffffff1634876040516116569190612d29565b60006040518083038185875af1925050503d8060008114611693576040519150601f19603f3d011682016040523d82523d6000602084013e611698565b606091505b505090506116a681866124ff565b60405173ffffffffffffffffffffffffffffffffffffffff8616907f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51190600090a25050505092915050565b6000806116fd876120db565b9050808651602088018651f59150611714826123d3565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f790600090a36000808373ffffffffffffffffffffffffffffffffffffffff168660200151886040516117849190612d29565b60006040518083038185875af1925050503d80600081146117c1576040519150601f19603f3d011682016040523d82523d6000602084013e6117c6565b606091505b509150915081611826577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed163115611958578473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed73ffffffffffffffffffffffffffffffffffffffff163160405160006040518083038185875af1925050503d80600081146118f2576040519150601f19603f3d011682016040523d82523d6000602084013e6118f7565b606091505b50909250905081611958577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b50505095945050505050565b60006107b36119e460408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b858585336116f1565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b600080611a23876120db565b905060006040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090506000828251602084016000f5905073ffffffffffffffffffffffffffffffffffffffff8116611af2576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b604051839073ffffffffffffffffffffffffffffffffffffffff8316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906790600090a3611b3e83610823565b935060008173ffffffffffffffffffffffffffffffffffffffff1687600001518a604051611b6c9190612d29565b60006040518083038185875af1925050503d8060008114611ba9576040519150601f19603f3d011682016040523d82523d6000602084013e611bae565b606091505b50509050611bbc81866124ff565b60405173ffffffffffffffffffffffffffffffffffffffff8616907f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51190600090a260608573ffffffffffffffffffffffffffffffffffffffff1688602001518a604051611c299190612d29565b60006040518083038185875af1925050503d8060008114611c66576040519150601f19603f3d011682016040523d82523d6000602084013e611c6b565b606091505b50909250905081611ccc577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed163115611dfe578673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed73ffffffffffffffffffffffffffffffffffffffff163160405160006040518083038185875af1925050503d8060008114611d98576040519150601f19603f3d011682016040523d82523d6000602084013e611d9d565b606091505b50909250905081611dfe577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b505050505095945050505050565b60006103dd611e8c60408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b868686866116f1565b60006103dd85858585336116f1565b60006103dd611f2460408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b86868686611a17565b6000808360601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f092505073ffffffffffffffffffffffffffffffffffffffff8216612016576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51190600090a26000808373ffffffffffffffffffffffffffffffffffffffff1634866040516120809190612d29565b60006040518083038185875af1925050503d80600081146120bd576040519150601f19603f3d011682016040523d82523d6000602084013e6120c2565b606091505b50915091506120d282828861247d565b50505092915050565b60008060006120e9846125b3565b9092509050600082600281111561210257612102612e02565b1480156121205750600081600281111561211e5761211e612e02565b145b1561215e57604080513360208201524691810191909152606081018590526080016040516020818303038152906040528051906020012092506123cc565b600082600281111561217257612172612e02565b1480156121905750600181600281111561218e5761218e612e02565b145b156121b0576121a9338560009182526020526040902090565b92506123cc565b60008260028111156121c4576121c4612e02565b03612233576040517f13b3a2a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b600182600281111561224757612247612e02565b1480156122655750600081600281111561226357612263612e02565b145b1561227e576121a9468560009182526020526040902090565b600182600281111561229257612292612e02565b1480156122b0575060028160028111156122ae576122ae612e02565b145b1561231f576040517f13b3a2a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b61239a60408051437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201526000906101000160405160208183030381529060405280519060200120905090565b84036123a657836123c9565b604080516020810186905201604051602081830303815290604052805190602001205b92505b5050919050565b73ffffffffffffffffffffffffffffffffffffffff8116158061240b575073ffffffffffffffffffffffffffffffffffffffff81163b155b1561247a576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b50565b82158061249f575073ffffffffffffffffffffffffffffffffffffffff81163b155b156124fa577f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed826040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161062c929190612d94565b505050565b811580612520575073ffffffffffffffffffffffffffffffffffffffff8116155b80612540575073ffffffffffffffffffffffffffffffffffffffff81163b155b156125af576040517fc05cee7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000ba5ed099633d3b313e4d5f7bdc1305d3c28ba5ed16600482015260240161062c565b5050565b600080606083901c3314801561261057508260141a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f0100000000000000000000000000000000000000000000000000000000000000145b1561262057506000905080915091565b606083901c3314801561265a57507fff00000000000000000000000000000000000000000000000000000000000000601484901a60f81b16155b1561266b5750600090506001915091565b33606084901c036126825750600090506002915091565b606083901c1580156126db57508260141a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f0100000000000000000000000000000000000000000000000000000000000000145b156126ec5750600190506000915091565b606083901c15801561272557507fff00000000000000000000000000000000000000000000000000000000000000601484901a60f81b16155b1561273557506001905080915091565b606083901c61274a5750600190506002915091565b8260141a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f0100000000000000000000000000000000000000000000000000000000000000036127a55750600290506000915091565b8260141a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166000036127e15750600290506001915091565b506002905080915091565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261282c57600080fd5b813567ffffffffffffffff80821115612847576128476127ec565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561288d5761288d6127ec565b816040528381528660208588010111156128a657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000604082840312156128d857600080fd5b6040516040810181811067ffffffffffffffff821117156128fb576128fb6127ec565b604052823581526020928301359281019290925250919050565b60008060008060a0858703121561292b57600080fd5b84359350602085013567ffffffffffffffff8082111561294a57600080fd5b6129568883890161281b565b9450604087013591508082111561296c57600080fd5b506129798782880161281b565b92505061298986606087016128c6565b905092959194509250565b600080604083850312156129a757600080fd5b82359150602083013567ffffffffffffffff8111156129c557600080fd5b6129d18582860161281b565b9150509250929050565b6000602082840312156129ed57600080fd5b813567ffffffffffffffff811115612a0457600080fd5b6107b38482850161281b565b803573ffffffffffffffffffffffffffffffffffffffff81168114612a3457600080fd5b919050565b600080600060608486031215612a4e57600080fd5b83359250612a5e60208501612a10565b9150604084013567ffffffffffffffff811115612a7a57600080fd5b612a868682870161281b565b9150509250925092565b600060208284031215612aa257600080fd5b5035919050565b600080600060808486031215612abe57600080fd5b833567ffffffffffffffff80821115612ad657600080fd5b612ae28783880161281b565b94506020860135915080821115612af857600080fd5b50612b058682870161281b565b925050612b1585604086016128c6565b90509250925092565b60008060408385031215612b3157600080fd5b82359150612b4160208401612a10565b90509250929050565b60008060408385031215612b5d57600080fd5b612b6683612a10565b946020939093013593505050565b60008060408385031215612b8757600080fd5b612b9083612a10565b9150602083013567ffffffffffffffff8111156129c557600080fd5b60008060408385031215612bbf57600080fd5b50508035926020909101359150565b60008060008060a08587031215612be457600080fd5b843567ffffffffffffffff80821115612bfc57600080fd5b612c088883890161281b565b95506020870135915080821115612c1e57600080fd5b50612c2b8782880161281b565b935050612c3b86604087016128c6565b915061298960808601612a10565b600080600080600060c08688031215612c6157600080fd5b85359450602086013567ffffffffffffffff80821115612c8057600080fd5b612c8c89838a0161281b565b95506040880135915080821115612ca257600080fd5b50612caf8882890161281b565b935050612cbf87606088016128c6565b9150612ccd60a08701612a10565b90509295509295909350565b600080600060608486031215612cee57600080fd5b8335925060208401359150612b1560408501612a10565b60005b83811015612d20578181015183820152602001612d08565b50506000910152565b60008251612d3b818460208701612d05565b9190910192915050565b67ffffffffffffffff828116828216039080821115612d8d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260008251806040840152612dcf816060850160208701612d05565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000817000a"
echo -n "  Contract $addr: "
code=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$addr\",\"latest\"],\"id\":1}" http://localhost:45128 | jq -r '.result')
if [[ "$code" != "$expected" ]]; then
  echo "Failed to verify createx contract"
  echo "Expected: $expected"
  echo "Got:      $code"
  
  killall tacchaind
  exit 1
else
  echo "Verified createx contract successfully"
fi

# verify x/vm params
echo "Verifying x/vm params"
expected_evm_params='{
  "evm_denom": "utac",
  "extra_eips": [
    "3855"
  ],
  "allow_unprotected_txs": true,
  "evm_channels": [],
  "access_control": {
    "create": {
      "access_type": "ACCESS_TYPE_PERMISSIONLESS",
      "access_control_list": []
    },
    "call": {
      "access_type": "ACCESS_TYPE_PERMISSIONLESS",
      "access_control_list": []
    }
  },
  "active_static_precompiles": [
    "0x0000000000000000000000000000000000000100",
    "0x0000000000000000000000000000000000000400",
    "0x0000000000000000000000000000000000000800",
    "0x0000000000000000000000000000000000000801",
    "0x0000000000000000000000000000000000000802",
    "0x0000000000000000000000000000000000000803",
    "0x0000000000000000000000000000000000000804",
    "0x0000000000000000000000000000000000000805",
    "0x0000000000000000000000000000000000000806",
    "0x0000000000000000000000000000000000000807"
  ]
}'
evm_params=$(tacchaind q evm params --node http://localhost:45111 --output json | jq -r '.params')
if [[ "$evm_params" != "$expected_evm_params" ]]; then
  echo "Failed to verify x/vm params"
  echo "Expected: $expected_evm_params"
  echo "Got:      $evm_params"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/vm params successfully"
fi

# verify x/feemarket min gas price
echo "Verifying x/feemarket min gas price"
expected_feemarket_min_gas_price='25000000000.000000000000000000'
feemarket_min_gas_price=$(tacchaind q feemarket params --node http://localhost:45111 --output json | jq -r '.params .min_gas_price')
if [[ "$feemarket_min_gas_price" != "$expected_feemarket_min_gas_price" ]]; then
  echo "Failed to verify x/feemarket min gas price"
  echo "Expected: $expected_feemarket_min_gas_price"
  echo "Got:      $feemarket_min_gas_price"
  
  killall tacchaind
  exit 1
else
  echo "Verified feemarket min gas price successfully"
fi

# verify max gas
echo "Verifying max gas"
expected_max_gas="90000000"
max_gas=$(tacchaind q consensus params --node http://localhost:45111 --output json | jq -r '.params .block .max_gas')
if [[ "$max_gas" != "$expected_max_gas" ]]; then
  echo "Failed to verify max gas"
  echo "Expected: $expected_max_gas"
  echo "Got:      $max_gas"
  
  killall tacchaind
  exit 1
else
  echo "Verified max gas successfully"
fi


# verify timeout commit
echo "Verifying timeout_commit"
expected_timeout_commit="1s"
timeout_commit=$(grep '^timeout_commit' $HOMEDIR/node0/config/config.toml | cut -d '=' -f2 | tr -d ' "')
if [[ "$timeout_commit" != "$expected_timeout_commit" ]]; then
  echo "Failed to verify timeout_commit"
  echo "Expected: $expected_timeout_commit"
  echo "Got:      $timeout_commit"
  
  killall tacchaind
  exit 1
else
  echo "Verified timeout_commit successfully"
fi

# verify x/mint params
echo "Verifying x/mint params"
expected_mint_params='{
  "mint_denom": "utac",
  "inflation_rate_change": "0.130000000000000000",
  "inflation_max": "0.050000000000000000",
  "inflation_min": "0.010000000000000000",
  "goal_bonded": "0.600000000000000000",
  "blocks_per_year": "15768000"
}'
mint_params=$(tacchaind q mint params --node http://localhost:45111 --output json | jq -r '.params')
if [[ "$mint_params" != "$expected_mint_params" ]]; then
  echo "Failed to verify x/mint params"
  echo "Expected: $expected_mint_params"
  echo "Got:      $mint_params"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/mint params successfully"
fi

# verify x/gov params
echo "Verifying x/gov params"
expected_gov_params='{
  "min_deposit": [
    {
      "denom": "utac",
      "amount": "10000000000000000"
    }
  ],
  "max_deposit_period": "48h0m0s",
  "voting_period": "12h0m0s",
  "quorum": "0.334000000000000000",
  "threshold": "0.500000000000000000",
  "veto_threshold": "0.334000000000000000",
  "min_initial_deposit_ratio": "1",
  "proposal_cancel_ratio": "0.500000000000000000",
  "expedited_voting_period": "6h0m0s",
  "expedited_threshold": "0.667000000000000000",
  "expedited_min_deposit": [
    {
      "denom": "utac",
      "amount": "50000000000000000"
    }
  ],
  "burn_vote_veto": true,
  "min_deposit_ratio": "0.010000000000000000"
}'
gov_params=$(tacchaind q gov params --node http://localhost:45111 --output json | jq -r '.params')
if [[ "$gov_params" != "$expected_gov_params" ]]; then
  echo "Failed to verify x/gov params"
  echo "Expected: $expected_gov_params"
  echo "Got:      $gov_params"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/gov params successfully"
fi

# verify api is enabled
echo "Verifying API is enabled"
expected_network="tacchain_239-1"
network=$(curl -s http://localhost:45122/cosmos/base/tendermint/v1beta1/node_info | jq -r '.default_node_info .network')
if [[ "$network" != "$expected_network" ]]; then
  echo "Failed to verify API is enabled"
  echo "Expected: $expected_network"
  echo "Got:      $network"
  
  killall tacchaind
  exit 1
else
  echo "Verified API is enabled successfully"
fi

# verify x/slashing params
echo "Verifying x/slashing params"
expected_slashing_params='{
  "signed_blocks_window": "21600",
  "min_signed_per_window": "0.500000000000000000",
  "downtime_jail_duration": "10m0s",
  "slash_fraction_double_sign": "0.050000000000000000",
  "slash_fraction_downtime": "0.001000000000000000"
}'
slashing_params=$(tacchaind q slashing params --node http://localhost:45111 --output json | jq -r '.params')
if [[ "$slashing_params" != "$expected_slashing_params" ]]; then
  echo "Failed to verify x/slashing params"
  echo "Expected: $expected_slashing_params"
  echo "Got:      $slashing_params"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/slashing params successfully"
fi

# verify x/bank denom metadata
echo "Verifying x/bank denom metadata"
expected_denom_metadata='{
  "description": "The native staking token for tacchaind.",
  "denom_units": [
    {
      "denom": "utac"
    },
    {
      "denom": "tac",
      "exponent": 18
    }
  ],
  "base": "utac",
  "display": "tac",
  "name": "TAC Token",
  "symbol": "TAC"
}'
denom_metadata=$(tacchaind q bank denom-metadata utac --node http://localhost:45111 --output json | jq -r '.metadata')
if [[ "$denom_metadata" != "$expected_denom_metadata" ]]; then
  echo "Failed to verify x/bank denom metadata"
  echo "Expected: $expected_denom_metadata"
  echo "Got:      $denom_metadata"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/bank denom metadata successfully"
fi

# verify x/staking max validators
echo "Verifying x/staking max validators"
expected_max_validators="14"
max_validators=$(tacchaind q staking params --node http://localhost:45111 --output json | jq -r '.params .max_validators')
if [[ "$max_validators" != "$expected_max_validators" ]]; then
  echo "Failed to verify x/staking max validators"
  echo "Expected: $expected_max_validators"
  echo "Got:      $max_validators"
  
  killall tacchaind
  exit 1
else
  echo "Verified x/staking max validators successfully"
fi

# verify 0 inflation
echo "Verifying 0 inflation"
expected_inflation="0.000000000000000000"
inflation=$(tacchaind q mint inflation --node http://localhost:45111 --output json | jq -r '.inflation')
if [[ "$inflation" != "$expected_inflation" ]]; then
  echo "Failed to verify 0 inflation"
  echo "Expected: $expected_inflation"
  echo "Got:      $inflation"
  
  killall tacchaind
  exit 1
else
  echo "Verified 0 inflation successfully"
fi

killall tacchaind
echo "All tests passed successfully"
